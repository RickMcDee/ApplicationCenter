@using BlazorMonaco.Editor

@inject ConfigurationKeyService BackendService;
@inject ISnackbar Snackbar
@inject ILogger<MonacoEditor> Logger

<style>
    .monaco-editor-container {
        height: 100px;
        border: 1px solid gray;
    }
</style>

<MudElement Class="flex-grow-1 mx-4">
    <MudItem Style="margin-top: 3rem;" Class="d-flex justify-space-between align-end">
        <MudText></MudText>
        <MudText Typo="Typo.h6" Class="mb-2">@ConfigurationKey.Name</MudText>
        <MudText Typo="Typo.caption" Style="font-style: italic">Last changed: @ConfigurationKey.UpdatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
    </MudItem>
    <StandaloneCodeEditor @ref="editor" Id="my-editor-instance-id" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" />
    <MudElement Class="d-flex justify-center mt-2">
        <MudButton Variant="Variant.Filled" Class="mr-8" OnClick="ResetValue">Reset</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveValue">Save</MudButton>
    </MudElement>
</MudElement>

@code {
    [Parameter]
    public required ConfigurationKeyViewModel ConfigurationKey { get; set; }

    private StandaloneCodeEditor editor = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (editor is not null)
        {
            await ResetValue();
        }
    }

    private async Task EditorOnDidInit()
    {
        await ResetValue();
    }

    private async Task SaveValue()
    {
        try
        {
            var val = await editor.GetValue();
            ConfigurationKey.Value = val;
            ConfigurationKey.UpdatedAt = DateTimeOffset.Now;
            await BackendService.AddOrUpdateConfigurationKey(ConfigurationKey);

            Snackbar.Add($"Saved the new value for {ConfigurationKey.Name}", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error while saving the new value for {ConfigurationKey.Name}", Severity.Error);
            Logger.LogError(ex, "Error while saving the new value for the configurationkey {Name} ({Id})", ConfigurationKey.Name, ConfigurationKey.Id);
        }
    }

    private async Task ResetValue()
    {
        await editor.SetValue(ConfigurationKey.Value);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json",
            Value = string.Empty
        };
    }

}
