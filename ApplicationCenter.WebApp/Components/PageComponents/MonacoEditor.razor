@using BlazorMonaco.Editor
@inject ConfigurationKeyValueService BackendService;
@inject ISnackbar Snackbar
@inject ILogger<MonacoEditor> Logger

<style>
    .monaco-editor-container {
        height: 140px;
        border: 1px solid gray;
    }
</style>

<MudElement Class="flex-grow-1 mx-4">
    <MudItem Style="margin-top: 3rem;" Class="d-flex justify-space-between align-end">
        <MudText></MudText>
        <MudText Typo="Typo.h6" Class="mb-2">@ApplicationStage.Production</MudText>
        <MudText Typo="Typo.caption" Style="font-style: italic">Last
            changed: @GetStageValue(ApplicationStage.Production).UpdatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
    </MudItem>
    <StandaloneCodeEditor @ref="_prodEditor" Id=@("prod-editor-instance-id")
                          ConstructionOptions="EditorConstructionOptions"
                          OnDidInit="() => EditorOnDidInit(ApplicationStage.Production)"/>
    <MudElement Class="d-flex justify-center mt-2">
        <MudButton Variant="Variant.Filled" Class="mr-8" OnClick="() => ResetValue(ApplicationStage.Production)">Reset
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="() => SaveValue(ApplicationStage.Production)">Save
        </MudButton>
    </MudElement>

    <MudItem Style="margin-top: 1rem;" Class="d-flex justify-space-between align-end">
        <MudText></MudText>
        <MudText Typo="Typo.h6" Class="mb-2">@ApplicationStage.Staging</MudText>
        <MudText Typo="Typo.caption" Style="font-style: italic">Last
            changed: @GetStageValue(ApplicationStage.Staging).UpdatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
    </MudItem>
    <StandaloneCodeEditor @ref="_stagingEditor" Id=@("staging-editor-instance-id")
                          ConstructionOptions="EditorConstructionOptions"
                          OnDidInit="() => EditorOnDidInit(ApplicationStage.Staging)"/>
    <MudElement Class="d-flex justify-center mt-2">
        <MudButton Variant="Variant.Filled" Class="mr-8" OnClick="() => ResetValue(ApplicationStage.Staging)">Reset
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SaveValue(ApplicationStage.Staging)">
            Save
        </MudButton>
    </MudElement>

    <MudItem Style="margin-top: 1rem;" Class="d-flex justify-space-between align-end">
        <MudText></MudText>
        <MudText Typo="Typo.h6" Class="mb-2">@ApplicationStage.Development</MudText>
        <MudText Typo="Typo.caption" Style="font-style: italic">Last
            changed: @GetStageValue(ApplicationStage.Development).UpdatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
    </MudItem>
    <StandaloneCodeEditor @ref="_devEditor" Id=@("dev-editor-instance-id")
                          ConstructionOptions="EditorConstructionOptions"
                          OnDidInit="() => EditorOnDidInit(ApplicationStage.Development)"/>
    <MudElement Class="d-flex justify-center mt-2">
        <MudButton Variant="Variant.Filled" Class="mr-8" OnClick="() => ResetValue(ApplicationStage.Development)">
            Reset
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="() => SaveValue(ApplicationStage.Development)">Save
        </MudButton>
    </MudElement>
</MudElement>

@code {

    [Parameter]
    public ConfigurationKey? ConfigurationKey { get; set; }

    private StandaloneCodeEditor? _devEditor;
    private StandaloneCodeEditor? _stagingEditor;
    private StandaloneCodeEditor? _prodEditor;

    protected override async Task OnParametersSetAsync()
    {
        if (_devEditor is not null)
        {
            await ResetValue(ApplicationStage.Development);
        }

        if (_stagingEditor is not null)
        {
            await ResetValue(ApplicationStage.Staging);
        }

        if (_prodEditor is not null)
        {
            await ResetValue(ApplicationStage.Production);
        }
    }

    private async Task EditorOnDidInit(ApplicationStage stage)
    {
        await ResetValue(stage);
    }

    private async Task SaveValue(ApplicationStage stage)
    {
        try
        {
            var editor = GetStageEditor(stage);
            var val = await editor.GetValue();
            var valueModel = GetStageValue(stage);
            var changedDate = DateTimeOffset.Now;
            valueModel.Value = val;
            valueModel.UpdatedAt = changedDate;
            await BackendService.UpdateConfigurationKeyValue(valueModel);

            Snackbar.Add($"Saved the new value for {ConfigurationKey.Name}", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error while saving the new value for {ConfigurationKey.Name}", Severity.Error);
            Logger.LogError(ex, "Error while saving the new value for the configurationkey {Name} ({Id})", ConfigurationKey.Name, ConfigurationKey.Id);
        }
    }

    private async Task ResetValue(ApplicationStage stage)
    {
        var editor = GetStageEditor(stage);
        await editor.SetValue(GetStageValue(stage).Value);
    }

    private ConfigurationKeyValue GetStageValue(ApplicationStage stage)
    {
        return ConfigurationKey.Values.Single(i => i.Stage == stage);
    }

    private StandaloneCodeEditor GetStageEditor(ApplicationStage stage)
    {
        return stage switch
        {
            ApplicationStage.Development => _devEditor!,
            ApplicationStage.Staging => _stagingEditor!,
            ApplicationStage.Production => _prodEditor!,
            _ => throw new ArgumentOutOfRangeException(nameof(stage)),
        };
    }

    private static StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new()
        {
            AutomaticLayout = true,
            Language = "json",
            Value = string.Empty,
        };
    }

}
