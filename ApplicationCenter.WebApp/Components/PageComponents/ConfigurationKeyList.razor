@inject ConfigurationKeyService BackendService;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar
@inject ILogger<ConfigurationKeyList> Logger

<MudPaper Width="300px" Class="d-flex">
    <MudList T="ConfigurationKey" Class="d-flex flex-column flex-grow-1">
        <MudPaper Square="true" Class="pb-2 px-2"
                  Style="border-bottom: thin #e0e0e0; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px;">
            <ListHeader Title="Keys" OnAddClick="@(async () => await ShowAddDialog())"/>
            <MudTextField T="string"
                          Label="Search"
                          Variant="Variant.Text"
                          Margin="Margin.Dense"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          DebounceInterval="300"
                          OnDebounceIntervalElapsed="FilterConfigurationKeys"/>
        </MudPaper>
        <MudElement Class="overflow-auto">
            @if (_configurationKeys.Count == 0)
            {
                <MudListItem Disabled="true">
                    <MudText Style="font-style: italic;">No keys for this application</MudText>
                </MudListItem>
            }
            @foreach (var item in _filteredConfigurationKeys)
            {
                <MudListItem Value="item" Text="@item.Name" OnClick="_ => OnConfigurationKeySelected(item)">
                    <ListItemWithMenu Text="@item.Name" OnEditClick="async () => await ShowEditDialog(item)"
                                      OnDeleteClick="async () => await ShowDeleteDialog(item)"/>
                </MudListItem>
            }
        </MudElement>
    </MudList>
</MudPaper>

@code {

    [Parameter]
    public Action<ConfigurationKey> OnConfigurationKeySelected { get; set; } = null!;

    private Guid _applicationId;
    private List<ConfigurationKey> _configurationKeys = [];
    private List<ConfigurationKey> _filteredConfigurationKeys = [];

    public async Task SetNewApplication(Guid applicationId)
    {
        _applicationId = applicationId;

        try
        {
            _configurationKeys = await BackendService.GetConfigurationKeys(_applicationId);
            _filteredConfigurationKeys = _configurationKeys;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error while loading configuration keys", Severity.Error);
            Logger.LogError(ex, "Error while loading configuration keys");
        }
    }

    private async Task ShowDeleteDialog(ConfigurationKey configurationKey)
    {
        var confirmation = await DialogService.ShowMessageBox(
            "Delete ConfigurationKey",
            $"This will remove the configurationkey {configurationKey.Name}.",
            "Okay", "Cancel");

        if (confirmation.HasValue && confirmation.Value)
        {
            try
            {
                await BackendService.RemoveConfigurationKey(configurationKey.Id);
                _configurationKeys.Remove(configurationKey);
                _filteredConfigurationKeys.Remove(configurationKey);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error while deleting configuration key {configurationKey.Name}", Severity.Error);
                Logger.LogError(ex, "Error while deleting configuration key {Name} ({Id})", configurationKey.Name, configurationKey.Id);
            }
        }
    }

    private async Task ShowAddDialog()
    {
        var parameters = new DialogParameters<ConfigurationKeyDialog> { { x => x.ApplicationId, _applicationId } };
        var dialog = await DialogService.ShowAsync<ConfigurationKeyDialog>("Add ConfigurationKey", parameters);
        var result = await dialog.Result;

        if (result?.Canceled is false)
        {
            var newKey = (result.Data as ConfigurationKey)!;
            _configurationKeys.Add(newKey);
            _configurationKeys = _configurationKeys.OrderBy(x => x.Name).ToList();
            FilterConfigurationKeys(string.Empty);

            OnConfigurationKeySelected(newKey);
        }
    }

    private async Task ShowEditDialog(ConfigurationKey configurationKey)
    {
        var parameters = new DialogParameters<ConfigurationKeyDialog> { { x => x.ApplicationId, _applicationId }, { x => x.Model, configurationKey } };
        await DialogService.ShowAsync<ConfigurationKeyDialog>("Edit ConfigurationKey", parameters);
    }

    private void FilterConfigurationKeys(string filterText)
    {
        if (string.IsNullOrEmpty(filterText))
        {
            _filteredConfigurationKeys = _configurationKeys;
        }

        _filteredConfigurationKeys = _configurationKeys.Where(x => x.Name.Contains(filterText)).ToList();
    }

}
